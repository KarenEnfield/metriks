#include <uapi/linux/ptrace.h>
#include <linux/sched.h>

struct http_request_t {
    u64 timestamp;
    u32 pid;
    u64 latency_ns;
};

BPF_HASH(start, u32, u64);

TRACEPOINT_PROBE(sched, sched_process_fork) {
    u32 pid = bpf_get_current_pid_tgid();
    u64 ts = bpf_ktime_get_ns();
    start.update(&pid, &ts);
    return 0;
}

TRACEPOINT_PROBE(sched, sched_process_exec) {
    u32 pid = bpf_get_current_pid_tgid();
    u64 *tsp, delta;

    tsp = start.lookup(&pid);
    if (tsp != 0) {
        delta = bpf_ktime_get_ns() - *tsp;
        bpf_trace_printk("exec() %d %d\\n", pid, delta / 1000);
        start.delete(&pid);
    }
    return 0;
}
